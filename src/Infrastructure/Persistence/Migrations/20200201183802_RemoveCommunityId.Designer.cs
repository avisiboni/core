// <auto-generated />
using System;
using Codidact.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Codidact.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200201183802_RemoveCommunityId")]
    partial class RemoveCommunityId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Codidact.Domain.Entities.Community", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime>("CreateDateAt")
                        .HasColumnName("create_date_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("DeletedByMemberId")
                        .HasColumnName("deleted_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("is_deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("Tagline")
                        .IsRequired()
                        .HasColumnName("tagline")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnName("url")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id")
                        .HasName("pk_communities");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("ix_communities_name");

                    b.HasIndex("Url")
                        .IsUnique()
                        .HasName("ix_communities_url");

                    b.ToTable("communities");
                });

            modelBuilder.Entity("Codidact.Domain.Entities.Member", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Bio")
                        .HasColumnName("bio")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDateAt")
                        .HasColumnName("create_date_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("DeletedByMemberId")
                        .HasColumnName("deleted_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnName("display_name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("character varying(320)")
                        .HasMaxLength(320);

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("is_deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnName("is_email_verified")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFromStackExchange")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_from_stack_exchange")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSuspended")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_suspended")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Location")
                        .HasColumnName("location")
                        .HasColumnType("text");

                    b.Property<long?>("StackExchangeId")
                        .HasColumnName("stack_exchange_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StackExchangeLastImportedAt")
                        .HasColumnName("stack_exchange_last_imported_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("StackExchangeValidatedAt")
                        .HasColumnName("stack_exchange_validated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("SuspensionEndAt")
                        .HasColumnName("suspension_end_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("pk_members");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("ix_members_email");

                    b.ToTable("members");
                });

            modelBuilder.Entity("Codidact.Domain.Entities.MemberCommunity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Bio")
                        .HasColumnName("bio")
                        .HasColumnType("text");

                    b.Property<long?>("CommunityId")
                        .HasColumnName("community_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDateAt")
                        .HasColumnName("create_date_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("deleted_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("DeletedByMemberId")
                        .HasColumnName("deleted_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnName("display_name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<long>("DownvotesCast")
                        .HasColumnName("downvotes_cast")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("character varying(320)")
                        .HasMaxLength(320);

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("is_deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnName("is_email_verified")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFromStackExchange")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_from_stack_exchange")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSameAsInstance")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_same_as_instance")
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsSuspended")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_suspended")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Location")
                        .HasColumnName("location")
                        .HasColumnType("text");

                    b.Property<long>("MemberId")
                        .HasColumnName("member_id")
                        .HasColumnType("bigint");

                    b.Property<long>("ProfileViews")
                        .HasColumnName("profile_views")
                        .HasColumnType("bigint");

                    b.Property<long>("Reputation")
                        .HasColumnName("reputation")
                        .HasColumnType("bigint");

                    b.Property<long?>("StackExchangeId")
                        .HasColumnName("stack_exchange_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StackExchangeLastImportedAt")
                        .HasColumnName("stack_exchange_last_imported_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("StackExchangeValidatedAt")
                        .HasColumnName("stack_exchange_validated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("SuspensionEndAt")
                        .HasColumnName("suspension_end_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("TrustLevelCommunityId")
                        .HasColumnName("trust_level_community_id")
                        .HasColumnType("bigint");

                    b.Property<long>("UpvotesCast")
                        .HasColumnName("upvotes_cast")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_member_communities");

                    b.HasIndex("CommunityId")
                        .HasName("ix_member_communities_community_id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("ix_member_communities_email");

                    b.HasIndex("TrustLevelCommunityId")
                        .HasName("ix_member_communities_trust_level_community_id");

                    b.HasIndex("MemberId", "CommunityId")
                        .IsUnique()
                        .HasName("ix_member_communities_member_id_community_id");

                    b.ToTable("member_communities");
                });

            modelBuilder.Entity("Codidact.Domain.Entities.TrustLevel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime>("CreateDateAt")
                        .HasColumnName("create_date_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Explanation")
                        .HasColumnName("explanation")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("pk_trust_levels");

                    b.HasIndex("Explanation")
                        .IsUnique()
                        .HasName("ix_trust_levels_explanation");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("ix_trust_levels_name");

                    b.ToTable("trust_levels");
                });

            modelBuilder.Entity("Codidact.Domain.Entities.TrustLevelCommunity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long?>("CommunityId")
                        .HasColumnName("community_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDateAt")
                        .HasColumnName("create_date_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreatedByMemberId")
                        .HasColumnName("created_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Explanation")
                        .HasColumnName("explanation")
                        .HasColumnType("text");

                    b.Property<bool>("IsSameAsInstance")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_same_as_instance")
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnName("last_modified_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifiedByMemberId")
                        .HasColumnName("last_modified_by_member_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("pk_trust_level_communities");

                    b.HasIndex("CommunityId")
                        .HasName("ix_trust_level_communities_community_id");

                    b.HasIndex("Explanation")
                        .IsUnique()
                        .HasName("ix_trust_level_communities_explanation");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("ix_trust_level_communities_name");

                    b.ToTable("trust_level_communities");
                });

            modelBuilder.Entity("Codidact.Domain.Entities.MemberCommunity", b =>
                {
                    b.HasOne("Codidact.Domain.Entities.Community", "Community")
                        .WithMany()
                        .HasForeignKey("CommunityId")
                        .HasConstraintName("fk_member_communities_communities_community_id");

                    b.HasOne("Codidact.Domain.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .HasConstraintName("fk_member_communities_members_member_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Codidact.Domain.Entities.TrustLevelCommunity", "TrustLevelCommunity")
                        .WithMany()
                        .HasForeignKey("TrustLevelCommunityId")
                        .HasConstraintName("fk_member_communities_trust_level_communities_trust_level_commun~")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Codidact.Domain.Entities.TrustLevelCommunity", b =>
                {
                    b.HasOne("Codidact.Domain.Entities.Community", "Community")
                        .WithMany()
                        .HasForeignKey("CommunityId")
                        .HasConstraintName("fk_trust_level_communities_communities_community_id");
                });
#pragma warning restore 612, 618
        }
    }
}
